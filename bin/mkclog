#!/usr/bin/env node

var program = require('commander');
var fs = require('fs');
var mkclog = require('..')();
var streamConcat = require('../lib/stream-concat')();
var lpad = require('../lib/util').lpad;
var version = require('../package').version;
var path = require('path');
var targetPackageJSON = require(path.join(process.cwd(), 'package.json'));

program
  .version(version)
  .option('-a, --all', 'Generate entire history, including commits since the previous tag.')
  .option('-t, --tag [tag]', 'Tag to use for commits since the previous tag. Valid semver names can also be used.')
  .option('-u, --url [url]', 'The url to the project homepage. This will be used when linking to commits.\n' +
    lpad('If this option is unspecified, the package.json "homepage" value will be used.\n', 21) +
    lpad('If this option is unspecified and the package.json "homepage" property does not exist, no commit links will be added.', 21))
  .option('-o, --output [file]', 'Write the output to this file.\n' +
    lpad('If the file exists and the -a option is not used, the output will be prepended to the file.\n', 21) +
    lpad('If the file exists and the -a option is used, the output will overwrite the file.\n', 21) +
    lpad('If this option is unspecified, the output will print to stdout.', 21));

program.on('--help', function(){
  console.log('  Examples:');
  console.log('');
  console.log('    $ mkclog -a -t v1.0.0');
  console.log('    $ mkclog -t v1.0.0 -o history.md ');
  console.log('    $ mkclog -t v1.0.0 -u http://foo.com -o history.md ');
  console.log('    $ mkclog -t minor -o history.md');
  console.log('');
});

program.parse(process.argv);

mkclog.setAll(program.all);
mkclog.setTag(program.tag);
mkclog.setUrl(program.url || targetPackageJSON.homepage);

if (program.output) {
  var writeOutput = function(){
    streamConcat.pipe(fs.createWriteStream(program.output));
  };
  streamConcat.write(mkclog);

  if (program.all) {
    writeOutput();
  } else {
    var rs = fs.createReadStream(program.output);
    rs.on('error', writeOutput);
    rs.on('open', function(){
      streamConcat.write(rs, writeOutput);
    });
  }
} else {
  mkclog.pipe(process.stdout);
}